{"version":3,"sources":["components/Menu.js","components/Editor.js","components/Preview.js","components/Translator.js","components/App.js","serviceWorker.js","index.js"],"names":["Menu","toggle","this","props","view","id","className","onClick","menuClick","src","alt","name","viewClick","Component","Editor","defaultValue","editor","onChange","editorChange","Preview","dangerouslySetInnerHTML","__html","preview","Translator","App","state","menuToggle","bind","setState","event","target","value","marked","breaks","console","log","React","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.35c69f5c.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass Menu extends Component {\r\n    render() {\r\n        const toggle = this.props.toggle;\r\n        const view = this.props.view;\r\n        return (\r\n            <div id=\"menu\" className={toggle ? \"open-menu\" : \"close-menu\"}>\r\n                <button className=\"menu-button\" onClick={this.props.menuClick} id={toggle ? \"open-button\" : \"close-button\"}>\r\n                    <img src={toggle ? \"https://img.icons8.com/ios-glyphs/30/000000/multiply.png\" : \"https://img.icons8.com/ios-glyphs/30/000000/menu.png\"} alt={toggle ? \"X button to close menu\" : \"3 bar icon to open menu\"} />\r\n                </button>\r\n                {toggle && <div id=\"button-set\">\r\n                    <button className={view === 'side' ? 'view-button current' : 'view-button'} name=\"side\" onClick={this.props.viewClick}>Side By Side</button>\r\n                    <button className={view === 'stacked' ? 'view-button current' : 'view-button'} name=\"stacked\" onClick={this.props.viewClick}>Top and Bottom</button>\r\n                    <button className={view === 'editor' ? 'view-button current' : 'view-button'} name=\"editor\" onClick={this.props.viewClick}>Only Editor</button>\r\n                    <button className={view === 'preview' ? 'view-button current' : 'view-button'} name=\"preview\" onClick={this.props.viewClick}>Only Preview</button>\r\n                </div>}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Menu;\r\n","import React, { Component } from 'react'\r\n\r\nclass Editor extends Component {\r\n    render() {\r\n        const view = this.props.view;\r\n        if (view !== 'preview') {\r\n            return (\r\n                <textarea id=\"editor\" defaultValue={this.props.editor} onChange={this.props.editorChange} className={\r\n                    view === 'side'\r\n                    ? 'editor side-by-side-item'\r\n                    : view === 'stacked' \r\n                    ? 'editor top-bottom-item'\r\n                    : view === 'editor'\r\n                    ? 'editor all-editor-item'\r\n                    : 'editor top-bottom-item'\r\n                }></textarea>\r\n            )\r\n            \r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n}\r\n\r\nexport default Editor;\r\n","import React, { Component } from 'react'\r\n\r\nclass Preview extends Component {\r\n    \r\n    render() {\r\n        const view = this.props.view;\r\n        if (view !== 'editor') {\r\n        return (\r\n            <div id=\"preview\" className={\r\n                view === 'side' \r\n                ? 'side-by-side-item'\r\n                : view === 'stacked'\r\n                ? 'top-bottom-item'\r\n                : view === 'preview'\r\n                ? 'all-preview-item'\r\n                : 'top-bottom-item'\r\n            } dangerouslySetInnerHTML={{__html: this.props.preview}}></div>\r\n            \r\n        )\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n}\r\n\r\nexport default Preview;\r\n","import React, { Component } from 'react';\r\nimport Editor from './Editor';\r\nimport Preview from './Preview';\r\n\r\nclass Translator extends Component {\r\n    render() {\r\n        const view = this.props.view;\r\n        return (\r\n            <div id=\"translator\" className={view === 'side' \r\n            ? 'side-by-side-container' \r\n            : view === 'stacked' \r\n            ? 'top-bottom-container'\r\n            : view === 'editor'\r\n            ? 'all-editor-container'\r\n            : view === 'preview'\r\n            ? 'all-preview-container'\r\n            : 'top-bottom-container'}>\r\n            <Editor view={view} editor={this.props.editor} editorChange={this.props.editorChange} /> \r\n            <Preview view={view} preview={this.props.preview} />\r\n            </div>\r\n    \r\n        )\r\n    }\r\n}\r\n\r\nexport default Translator;\r\n","import React from 'react';\nimport '../index.css';\nimport Menu from './Menu';\nimport Translator from './Translator';\nimport marked from 'marked';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      menuToggle: false,\n      view: 'stacked',\n      editor: \n`# Welcome to the markdown previewer!\n**This previewer works with GitHub Markdown**\n[Learn more here](https://docs.github.com/en/github/writing-on-github/basic-writing-and-formatting-syntax)\nYou're looking at a \\`<textarea>\\`!\nAll text entered here will be shown in the\n\\`\\`\\`\n    <p id=\"preview\">\n    preview area!\n    </p>\n\\`\\`\\`\n## This is a picture of a bird\n![this is an image of a bird](https://images.pexels.com/photos/2662434/pexels-photo-2662434.jpeg?auto=compress&cs=tinysrgb&dpr=2&h=650&w=940)\n1. v colorful\n2. lerkin fer werms\n3. birb\n\n> \"I like birds\"\n\n-Albert Einstein, probably`,\n      preview: ''\n    };\n    this.menuClick = this.menuClick.bind(this);\n    this.viewClick = this.viewClick.bind(this);\n    this.editorChange = this.editorChange.bind(this);\n  }\n\n  menuClick() {\n    this.setState((state, props) => ({\n      menuToggle: !state.menuToggle\n    }));\n  }\n\n  viewClick(event) {\n    this.setState({\n      view: event.target.name\n    })\n  }\n\n  editorChange(event) {\n    this.setState({\n      editor: event.target.value\n    })\n  }\n\n  render(){\n    const {menuToggle: toggle} = this.state;\n    const preview = marked(this.state.editor, {breaks: true});\n    console.log(this.state.editor);\n    console.log(preview)\n    return (\n    <div className=\"App\">\n      <Menu toggle={toggle} view={this.state.view} menuClick={this.menuClick} viewClick={this.viewClick} />\n      <Translator view={this.state.view} editor={this.state.editor} editorChange={this.editorChange} preview={preview} />\n    </div>\n  );\n  };\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}